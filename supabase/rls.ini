[RLS_CONFIGURATION]
; Row Level Security Configuration for AI Business Platform
; Last Updated: 2025-01-16

[HELPER_FUNCTIONS]
auth_is_platform_owner = "Checks if current user is platform owner"
auth_is_platform_admin = "Checks if user is platform owner or admin"
auth_is_sales_team = "Checks if user is platform owner, admin, or sales"
auth_tenant_id = "Returns current user's tenant_id (if tenant user)"
auth_has_tenant_access = "Checks if user can access a specific tenant"

[PLATFORM_TABLES]
; Platform Owner Only Access
platform_settings = "owner_only"
system_logs = "owner_only"
api_usage = "owner_only"

; Platform Users
platform_users.select = "self_or_owner"
platform_users.insert = "owner_only"
platform_users.update = "self_or_owner"
platform_users.delete = "owner_only"

; Sales Management
sales_territories.select = "assigned_or_admin"
sales_territories.insert = "admin_only"
sales_territories.update = "admin_only"
sales_territories.delete = "owner_only"

sales_leads.select = "assigned_or_owner"
sales_leads.insert = "assigned_sales_or_admin"
sales_leads.update = "assigned_or_owner"
sales_leads.delete = "owner_only"

; Revenue Tracking
platform_revenue.select = "sales_rep_or_owner"
platform_revenue.insert = "admin_only"
platform_revenue.update = "owner_only"
platform_revenue.delete = "owner_only"

[TENANT_TABLES]
; Tenant Management
tenants.select = "has_tenant_access"
tenants.insert = "sales_team"
tenants.update = "owner_or_tenant_owner"
tenants.delete = "owner_only"

; Tenant Users
tenant_users.select = "same_tenant_or_owner"
tenant_users.insert = "owner_or_tenant_admin"
tenant_users.update = "self_or_tenant_admin_or_owner"
tenant_users.delete = "owner_or_tenant_owner"

; Tenant Settings
tenant_settings.select = "has_tenant_access"
tenant_settings.insert = "owner_or_tenant_admin"
tenant_settings.update = "owner_or_tenant_admin"
tenant_settings.delete = "owner_or_tenant_owner"

[CUSTOMER_DATA]
; All customer tables follow tenant isolation
customers = "tenant_isolated"
customer_addresses = "follows_parent_customer"
customer_tags = "follows_parent_customer"
customer_preferences = "follows_parent_customer"

[CONVERSATION_DATA]
; All conversation tables follow tenant isolation
conversations = "tenant_isolated"
messages = "tenant_isolated"
message_media = "follows_parent_message"
message_metadata = "follows_parent_message"

[MARKETING_DATA]
; Campaign Management
campaigns = "tenant_isolated"
campaign_channels = "follows_parent_campaign"
campaign_audience = "follows_parent_campaign"
campaign_content = "follows_parent_campaign"
campaign_metrics = "follows_parent_campaign"

; Lead Management
leads = "tenant_isolated"
lead_activities = "follows_parent_lead"
lead_scores = "follows_parent_lead"

; Content Management
content_library = "tenant_isolated"
content_templates = "tenant_isolated"
scheduled_content = "tenant_isolated"
content_performance = "owner_only"

[WEBSITE_BUILDER]
; Master Templates (Platform Level)
website_templates.select = "public_read"
website_templates.insert = "owner_only"
website_templates.update = "owner_only"
website_templates.delete = "owner_only"

website_sections.select = "public_read"
website_sections.insert = "owner_only"
website_sections.update = "owner_only"
website_sections.delete = "owner_only"

; Tenant Websites
tenant_websites.select = "has_tenant_access"
tenant_websites.insert = "owner_or_sales_with_access_or_tenant_admin"
tenant_websites.update = "owner_or_sales_with_access_or_tenant_admin"
tenant_websites.delete = "owner_or_tenant_owner"

; Website Customizations
website_customizations = "follows_parent_website"
website_pages = "follows_parent_website"

[AUDIT_TABLES]
commissions.select = "sales_rep_or_owner"
commissions.insert = "admin_only"
commissions.update = "owner_only"
commissions.delete = "owner_only"

onboarding_sessions.select = "sales_rep_or_owner"
onboarding_sessions.insert = "sales_rep_or_admin"
onboarding_sessions.update = "sales_rep_or_owner"
onboarding_sessions.delete = "owner_only"

[MIGRATION_STATUS]
000_complete_schema = "✓ Executed successfully"
001_fix_platform_owner = "✓ Executed successfully"
002_rls_policies = "✓ Executed (had errors)"
003_comprehensive_rls_policies = "✓ Executed successfully"

[NEXT_STEPS]
1 = "Create authentication system for platform users"
2 = "Create authentication system for tenant users"
3 = "Implement API endpoints with RLS enforcement"
4 = "Create admin dashboard for platform owner"
5 = "Create sales team dashboard"
6 = "Create tenant dashboard"
7 = "Implement website builder UI"
8 = "Set up monitoring and logging"

[IMPORTANT_NOTES]
sales_can_create_websites = "TRUE - Sales team can create and manage websites for their assigned clients"
tenant_isolation = "TRUE - Each tenant can only see their own data"
platform_owner_access = "FULL - Platform owner has unrestricted access to all data"
template_access = "PUBLIC_READ - Everyone can browse website templates, only owner can modify"

[RLS_POLICY_EXPLANATION]
; Understanding qual vs with_check in PostgreSQL RLS
qual_field = "USING clause - checks which existing rows can be accessed"
with_check_field = "WITH CHECK clause - validates new/modified rows"

; For different operations:
SELECT_operation = "Only uses qual (USING), with_check is always null"
INSERT_operation = "Only uses with_check (WITH CHECK), qual is always null"
UPDATE_operation = "Uses both - qual to check which rows can be updated, with_check to validate the updated values"
DELETE_operation = "Only uses qual (USING) to check which rows can be deleted, with_check is always null"

; Example from website_sections_delete policy:
example_policy = "DELETE uses qual='auth_is_platform_owner()' and with_check=null"
example_meaning = "Only platform owner can delete website sections, no validation needed for deleted rows"