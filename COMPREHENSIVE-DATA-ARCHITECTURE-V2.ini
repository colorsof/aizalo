# COMPREHENSIVE DATA ARCHITECTURE V2
# AI Marketing & Sales Automation Platform
# Properly normalized relational database design

[PLATFORM_OVERVIEW]
name = "AI Business Platform - Customer Acquisition Machine"
vision = "We don't just answer questions - we FIND customers, NURTURE them, and CLOSE sales while you sleep"
database = "PostgreSQL with Row Level Security (RLS)"
architecture = "Multi-tenant with proper data isolation"

[USER_HIERARCHY]
; Clear separation of user types and their data access
platform_owner = "Bernard - Full system access"
sales_team = "Platform employees - Manage client acquisition"
tenant_owners = "Business owners who subscribe"
tenant_staff = "Business employees with limited access"
customers = "End users interacting with businesses"

# ==========================================
# CORE PLATFORM TABLES (Platform Owner Only)
# ==========================================

[platform_settings]
id = "SERIAL PRIMARY KEY"
key = "VARCHAR(100) UNIQUE NOT NULL"
value = "TEXT"
data_type = "VARCHAR(20) -- string|number|boolean|json"
description = "TEXT"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"

[platform_users]
; Platform owner and sales team
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
email = "VARCHAR(255) UNIQUE NOT NULL"
password_hash = "VARCHAR(255) NOT NULL"
full_name = "VARCHAR(100) NOT NULL"
role = "VARCHAR(20) CHECK (role IN ('owner', 'sales', 'support', 'admin'))"
is_active = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"
last_login_at = "TIMESTAMP"

[sales_territories]
id = "SERIAL PRIMARY KEY"
name = "VARCHAR(100) NOT NULL -- e.g., Westlands, CBD, Karen"
city = "VARCHAR(50) NOT NULL"
assigned_to = "UUID REFERENCES platform_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"

[sales_leads]
; Potential clients tracked by sales team
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
business_name = "VARCHAR(255) NOT NULL"
contact_name = "VARCHAR(100)"
phone = "VARCHAR(20) NOT NULL"
email = "VARCHAR(255)"
industry = "VARCHAR(50)"
territory_id = "INTEGER REFERENCES sales_territories(id)"
assigned_to = "UUID REFERENCES platform_users(id)"
status = "VARCHAR(20) CHECK (status IN ('new', 'contacted', 'demo', 'negotiating', 'won', 'lost'))"
notes = "TEXT"
created_at = "TIMESTAMP DEFAULT NOW()"
last_contact_at = "TIMESTAMP"

[platform_revenue]
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id)"
amount = "DECIMAL(10,2) NOT NULL"
type = "VARCHAR(20) CHECK (type IN ('subscription', 'setup', 'addon', 'overage'))"
payment_method = "VARCHAR(20) CHECK (payment_method IN ('mpesa', 'bank', 'card', 'cash'))"
payment_reference = "VARCHAR(100)"
sales_rep_id = "UUID REFERENCES platform_users(id)"
commission_percentage = "DECIMAL(5,2)"
commission_amount = "DECIMAL(10,2)"
paid_at = "TIMESTAMP"
created_at = "TIMESTAMP DEFAULT NOW()"

# ==========================================
# MULTI-TENANT CORE TABLES
# ==========================================

[tenants]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
business_name = "VARCHAR(255) NOT NULL"
subdomain = "VARCHAR(50) UNIQUE NOT NULL"
industry = "VARCHAR(50) NOT NULL CHECK (industry IN ('hotels', 'restaurants', 'real_estate', 'car_dealers', 'beauty', 'medical', 'tech', 'law', 'hardware'))"
tier = "INTEGER CHECK (tier IN (1, 2, 3))"
phone = "VARCHAR(20) NOT NULL"
email = "VARCHAR(255) NOT NULL"
address = "TEXT"
city = "VARCHAR(50)"
postal_code = "VARCHAR(10)"
latitude = "DECIMAL(10,8)"
longitude = "DECIMAL(11,8)"
timezone = "VARCHAR(50) DEFAULT 'Africa/Nairobi'"
currency = "VARCHAR(3) DEFAULT 'KES'"
subscription_status = "VARCHAR(20) CHECK (subscription_status IN ('trial', 'active', 'past_due', 'canceled', 'suspended'))"
subscription_plan = "VARCHAR(20) CHECK (subscription_plan IN ('starter', 'professional', 'growth'))"
monthly_fee = "DECIMAL(10,2)"
trial_ends_at = "DATE"
next_billing_date = "DATE"
created_at = "TIMESTAMP DEFAULT NOW()"
activated_at = "TIMESTAMP"
churned_at = "TIMESTAMP"

[tenant_users]
; Users within each tenant organization
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
email = "VARCHAR(255) NOT NULL"
password_hash = "VARCHAR(255) NOT NULL"
full_name = "VARCHAR(100) NOT NULL"
role = "VARCHAR(20) CHECK (role IN ('owner', 'admin', 'staff', 'viewer'))"
permissions = "TEXT[] -- Array of permission strings"
is_active = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"
last_login_at = "TIMESTAMP"
UNIQUE = "(tenant_id, email)"

[tenant_settings]
; Normalized tenant configuration
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
category = "VARCHAR(50) NOT NULL -- branding|notifications|integrations|ai"
key = "VARCHAR(100) NOT NULL"
value = "TEXT"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(tenant_id, category, key)"

# ==========================================
# CUSTOMER MANAGEMENT TABLES
# ==========================================

[customers]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
phone = "VARCHAR(20) NOT NULL"
phone_verified = "BOOLEAN DEFAULT false"
email = "VARCHAR(255)"
email_verified = "BOOLEAN DEFAULT false"
first_name = "VARCHAR(50)"
last_name = "VARCHAR(50)"
date_of_birth = "DATE"
gender = "VARCHAR(10) CHECK (gender IN ('male', 'female', 'other', NULL))"
language = "VARCHAR(5) DEFAULT 'en' CHECK (language IN ('en', 'sw'))"
created_at = "TIMESTAMP DEFAULT NOW()"
last_active_at = "TIMESTAMP"
UNIQUE = "(tenant_id, phone)"
INDEX = "idx_customers_tenant_phone (tenant_id, phone)"

[customer_addresses]
id = "SERIAL PRIMARY KEY"
customer_id = "UUID REFERENCES customers(id) ON DELETE CASCADE"
type = "VARCHAR(20) CHECK (type IN ('home', 'work', 'delivery', 'other'))"
address_line1 = "VARCHAR(255)"
address_line2 = "VARCHAR(255)"
city = "VARCHAR(100)"
postal_code = "VARCHAR(20)"
area = "VARCHAR(100) -- e.g., Westlands, Kilimani"
landmark = "VARCHAR(255) -- Near Sarit Centre"
latitude = "DECIMAL(10,8)"
longitude = "DECIMAL(11,8)"
is_default = "BOOLEAN DEFAULT false"
created_at = "TIMESTAMP DEFAULT NOW()"

[customer_tags]
; Flexible tagging system for segmentation
id = "SERIAL PRIMARY KEY"
customer_id = "UUID REFERENCES customers(id) ON DELETE CASCADE"
tag_name = "VARCHAR(50) NOT NULL"
tag_value = "VARCHAR(255)"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_customer_tags_search (customer_id, tag_name)"

[customer_preferences]
id = "SERIAL PRIMARY KEY"
customer_id = "UUID REFERENCES customers(id) ON DELETE CASCADE"
preference_type = "VARCHAR(50) NOT NULL"
preference_value = "VARCHAR(255) NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(customer_id, preference_type)"

# ==========================================
# CONVERSATION & MESSAGING TABLES
# ==========================================

[conversations]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
customer_id = "UUID REFERENCES customers(id)"
channel = "VARCHAR(20) NOT NULL CHECK (channel IN ('whatsapp', 'facebook', 'instagram', 'tiktok', 'email', 'web', 'sms'))"
status = "VARCHAR(20) CHECK (status IN ('active', 'waiting', 'resolved', 'abandoned'))"
assigned_to = "UUID REFERENCES tenant_users(id)"
priority = "INTEGER DEFAULT 0 CHECK (priority >= 0 AND priority <= 5)"
first_response_at = "TIMESTAMP"
resolved_at = "TIMESTAMP"
resolution_time_seconds = "INTEGER GENERATED ALWAYS AS (EXTRACT(EPOCH FROM (resolved_at - created_at))) STORED"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_conversations_tenant_status (tenant_id, status)"
INDEX = "idx_conversations_customer (customer_id)"

[messages]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
conversation_id = "UUID REFERENCES conversations(id) ON DELETE CASCADE"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
sender_type = "VARCHAR(20) CHECK (sender_type IN ('customer', 'ai', 'staff', 'system'))"
sender_id = "UUID -- References customers or tenant_users based on sender_type"
content = "TEXT NOT NULL"
message_type = "VARCHAR(20) CHECK (message_type IN ('text', 'image', 'video', 'audio', 'document', 'location'))"
is_deleted = "BOOLEAN DEFAULT false"
created_at = "TIMESTAMP DEFAULT NOW()"
delivered_at = "TIMESTAMP"
read_at = "TIMESTAMP"
INDEX = "idx_messages_conversation (conversation_id, created_at)"

[message_media]
; Separate table for media attachments
id = "SERIAL PRIMARY KEY"
message_id = "UUID REFERENCES messages(id) ON DELETE CASCADE"
media_type = "VARCHAR(20) NOT NULL"
media_url = "TEXT NOT NULL"
thumbnail_url = "TEXT"
file_size_bytes = "INTEGER"
duration_seconds = "INTEGER -- For audio/video"
created_at = "TIMESTAMP DEFAULT NOW()"

[message_metadata]
; AI processing metadata
id = "SERIAL PRIMARY KEY"
message_id = "UUID REFERENCES messages(id) ON DELETE CASCADE"
ai_model_used = "VARCHAR(20) CHECK (ai_model_used IN ('gemini', 'groq', 'openai'))"
processing_time_ms = "INTEGER"
tokens_used = "INTEGER"
confidence_score = "DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1)"
sentiment = "VARCHAR(20) CHECK (sentiment IN ('positive', 'neutral', 'negative', 'mixed'))"
intent_detected = "VARCHAR(50)"
entities_extracted = "TEXT[] -- Array of detected entities"
created_at = "TIMESTAMP DEFAULT NOW()"

# ==========================================
# LEAD MANAGEMENT TABLES
# ==========================================

[leads]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
customer_id = "UUID REFERENCES customers(id)"
source = "VARCHAR(50) NOT NULL -- google|facebook|whatsapp|referral|walk-in"
source_campaign_id = "UUID REFERENCES campaigns(id)"
status = "VARCHAR(20) CHECK (status IN ('new', 'contacted', 'qualified', 'proposal', 'negotiation', 'won', 'lost'))"
score = "INTEGER DEFAULT 0 CHECK (score >= 0 AND score <= 100)"
assigned_to = "UUID REFERENCES tenant_users(id)"
potential_value = "DECIMAL(12,2)"
probability = "DECIMAL(3,2) CHECK (probability >= 0 AND probability <= 1)"
lost_reason = "VARCHAR(100)"
won_date = "DATE"
next_action = "VARCHAR(255)"
next_action_date = "DATE"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_leads_tenant_status (tenant_id, status)"

[lead_activities]
; Track all interactions with leads
id = "SERIAL PRIMARY KEY"
lead_id = "UUID REFERENCES leads(id) ON DELETE CASCADE"
activity_type = "VARCHAR(50) NOT NULL -- call|email|meeting|demo|quote"
description = "TEXT"
outcome = "VARCHAR(100)"
performed_by = "UUID REFERENCES tenant_users(id)"
scheduled_at = "TIMESTAMP"
completed_at = "TIMESTAMP"
created_at = "TIMESTAMP DEFAULT NOW()"

[lead_scores]
; Scoring criteria and history
id = "SERIAL PRIMARY KEY"
lead_id = "UUID REFERENCES leads(id) ON DELETE CASCADE"
criterion = "VARCHAR(50) NOT NULL -- engagement|budget|timeline|fit"
score = "INTEGER NOT NULL"
max_score = "INTEGER NOT NULL"
reason = "TEXT"
calculated_at = "TIMESTAMP DEFAULT NOW()"

# ==========================================
# CAMPAIGN MANAGEMENT TABLES
# ==========================================

[campaigns]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(255) NOT NULL"
type = "VARCHAR(30) CHECK (type IN ('email', 'sms', 'whatsapp', 'social', 'multi_channel'))"
objective = "VARCHAR(30) CHECK (objective IN ('awareness', 'acquisition', 'engagement', 'retention', 'reactivation'))"
status = "VARCHAR(20) CHECK (status IN ('draft', 'scheduled', 'active', 'paused', 'completed', 'archived'))"
budget = "DECIMAL(10,2)"
spent = "DECIMAL(10,2) DEFAULT 0"
starts_at = "TIMESTAMP"
ends_at = "TIMESTAMP"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_campaigns_tenant_status (tenant_id, status)"

[campaign_channels]
; Which channels a campaign uses
id = "SERIAL PRIMARY KEY"
campaign_id = "UUID REFERENCES campaigns(id) ON DELETE CASCADE"
channel = "VARCHAR(20) NOT NULL"
is_active = "BOOLEAN DEFAULT true"
budget_allocation = "DECIMAL(5,2) -- Percentage"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(campaign_id, channel)"

[campaign_audience]
; Target audience definition
id = "SERIAL PRIMARY KEY"
campaign_id = "UUID REFERENCES campaigns(id) ON DELETE CASCADE"
filter_type = "VARCHAR(50) NOT NULL -- tag|location|behavior|custom"
filter_operator = "VARCHAR(20) NOT NULL -- equals|contains|greater_than|less_than"
filter_value = "VARCHAR(255) NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"

[campaign_content]
; Content variants for A/B testing
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
campaign_id = "UUID REFERENCES campaigns(id) ON DELETE CASCADE"
variant_name = "VARCHAR(50) NOT NULL -- A|B|C"
channel = "VARCHAR(20) NOT NULL"
subject = "VARCHAR(255) -- For email"
preview_text = "VARCHAR(255) -- For email"
content = "TEXT NOT NULL"
media_url = "TEXT"
cta_text = "VARCHAR(100)"
cta_url = "TEXT"
is_control = "BOOLEAN DEFAULT false"
traffic_percentage = "DECIMAL(5,2)"
created_at = "TIMESTAMP DEFAULT NOW()"

[campaign_metrics]
; Aggregated campaign performance
id = "SERIAL PRIMARY KEY"
campaign_id = "UUID REFERENCES campaigns(id) ON DELETE CASCADE"
variant_id = "UUID REFERENCES campaign_content(id)"
date = "DATE NOT NULL"
sent = "INTEGER DEFAULT 0"
delivered = "INTEGER DEFAULT 0"
opened = "INTEGER DEFAULT 0"
clicked = "INTEGER DEFAULT 0"
converted = "INTEGER DEFAULT 0"
revenue = "DECIMAL(10,2) DEFAULT 0"
cost = "DECIMAL(10,2) DEFAULT 0"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(campaign_id, variant_id, date)"

# ==========================================
# AI & AUTOMATION TABLES
# ==========================================

[ai_models]
; Available AI models and their configuration
id = "SERIAL PRIMARY KEY"
name = "VARCHAR(50) UNIQUE NOT NULL -- gemini-1.5-flash|groq-llama3|gpt-3.5-turbo"
provider = "VARCHAR(30) NOT NULL -- google|groq|openai"
purpose = "VARCHAR(100) NOT NULL"
is_active = "BOOLEAN DEFAULT true"
priority = "INTEGER NOT NULL -- Lower number = higher priority"
rate_limit_per_minute = "INTEGER"
rate_limit_per_day = "INTEGER"
avg_response_time_ms = "INTEGER"
cost_per_1k_tokens = "DECIMAL(6,4)"
created_at = "TIMESTAMP DEFAULT NOW()"

[ai_prompts]
; Reusable prompt templates
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(100) NOT NULL"
category = "VARCHAR(50) NOT NULL -- greeting|negotiation|support|content"
prompt_template = "TEXT NOT NULL"
model_preference = "VARCHAR(50) REFERENCES ai_models(name)"
is_active = "BOOLEAN DEFAULT true"
success_rate = "DECIMAL(5,2)"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"

[ai_usage]
; Track AI usage for optimization and billing
id = "BIGSERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
model_name = "VARCHAR(50) REFERENCES ai_models(name)"
prompt_id = "UUID REFERENCES ai_prompts(id)"
conversation_id = "UUID REFERENCES conversations(id)"
tokens_prompt = "INTEGER NOT NULL"
tokens_completion = "INTEGER NOT NULL"
tokens_total = "INTEGER GENERATED ALWAYS AS (tokens_prompt + tokens_completion) STORED"
response_time_ms = "INTEGER NOT NULL"
cost = "DECIMAL(8,6)"
success = "BOOLEAN NOT NULL"
error_message = "TEXT"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_ai_usage_tenant_date (tenant_id, created_at)"

[automation_workflows]
; Marketing automation workflows
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(255) NOT NULL"
trigger_type = "VARCHAR(50) NOT NULL -- time|event|behavior|manual"
is_active = "BOOLEAN DEFAULT true"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"

[workflow_steps]
; Individual steps in a workflow
id = "SERIAL PRIMARY KEY"
workflow_id = "UUID REFERENCES automation_workflows(id) ON DELETE CASCADE"
step_order = "INTEGER NOT NULL"
action_type = "VARCHAR(50) NOT NULL -- wait|send_message|add_tag|create_task|branch"
action_config = "TEXT NOT NULL -- JSON configuration"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(workflow_id, step_order)"

[workflow_executions]
; Track workflow runs
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
workflow_id = "UUID REFERENCES automation_workflows(id)"
customer_id = "UUID REFERENCES customers(id)"
current_step = "INTEGER"
status = "VARCHAR(20) CHECK (status IN ('running', 'completed', 'failed', 'canceled'))"
started_at = "TIMESTAMP DEFAULT NOW()"
completed_at = "TIMESTAMP"
error_message = "TEXT"

# ==========================================
# CONTENT MANAGEMENT TABLES
# ==========================================

[content_templates]
; Reusable content templates
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(255) NOT NULL"
type = "VARCHAR(30) CHECK (type IN ('email', 'sms', 'social_post', 'blog', 'landing_page'))"
category = "VARCHAR(50)"
content = "TEXT NOT NULL"
variables = "TEXT[] -- Array of variable names like {customer_name}"
is_active = "BOOLEAN DEFAULT true"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"

[scheduled_content]
; Content scheduled for future posting
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
channel = "VARCHAR(20) NOT NULL"
content_type = "VARCHAR(30) NOT NULL"
content = "TEXT NOT NULL"
media_urls = "TEXT[]"
scheduled_for = "TIMESTAMP NOT NULL"
status = "VARCHAR(20) CHECK (status IN ('scheduled', 'published', 'failed', 'canceled'))"
published_at = "TIMESTAMP"
error_message = "TEXT"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_scheduled_content_date (tenant_id, scheduled_for)"

[content_performance]
; Track content engagement
id = "SERIAL PRIMARY KEY"
content_id = "UUID NOT NULL -- References various content tables"
content_type = "VARCHAR(30) NOT NULL"
channel = "VARCHAR(20) NOT NULL"
impressions = "INTEGER DEFAULT 0"
engagements = "INTEGER DEFAULT 0"
clicks = "INTEGER DEFAULT 0"
shares = "INTEGER DEFAULT 0"
conversions = "INTEGER DEFAULT 0"
revenue_attributed = "DECIMAL(10,2) DEFAULT 0"
measured_at = "TIMESTAMP DEFAULT NOW()"

# ==========================================
# WEBSITE BUILDER TABLES
# ==========================================

[website_templates]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
name = "VARCHAR(100) NOT NULL"
industry = "VARCHAR(50) NOT NULL"
description = "TEXT"
preview_url = "TEXT"
thumbnail_url = "TEXT"
is_active = "BOOLEAN DEFAULT true"
usage_count = "INTEGER DEFAULT 0"
created_at = "TIMESTAMP DEFAULT NOW()"

[website_sections]
; Available sections for each template
id = "SERIAL PRIMARY KEY"
template_id = "UUID REFERENCES website_templates(id) ON DELETE CASCADE"
section_type = "VARCHAR(50) NOT NULL -- hero|features|testimonials|pricing|contact"
section_name = "VARCHAR(100) NOT NULL"
default_content = "TEXT"
is_required = "BOOLEAN DEFAULT false"
sort_order = "INTEGER NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"

[tenant_websites]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
template_id = "UUID REFERENCES website_templates(id)"
subdomain = "VARCHAR(50) UNIQUE NOT NULL"
custom_domain = "VARCHAR(255) UNIQUE"
is_published = "BOOLEAN DEFAULT false"
published_at = "TIMESTAMP"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"

[website_customizations]
; Store website customizations
id = "SERIAL PRIMARY KEY"
website_id = "UUID REFERENCES tenant_websites(id) ON DELETE CASCADE"
customization_type = "VARCHAR(50) NOT NULL -- color|font|logo|content"
key = "VARCHAR(100) NOT NULL"
value = "TEXT NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(website_id, customization_type, key)"

[website_pages]
; Custom pages beyond the template
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
website_id = "UUID REFERENCES tenant_websites(id) ON DELETE CASCADE"
slug = "VARCHAR(100) NOT NULL"
title = "VARCHAR(255) NOT NULL"
meta_description = "TEXT"
content = "TEXT NOT NULL"
is_published = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(website_id, slug)"

# ==========================================
# ANALYTICS & REPORTING TABLES
# ==========================================

[analytics_events]
; Raw event tracking
id = "BIGSERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
event_type = "VARCHAR(50) NOT NULL"
event_category = "VARCHAR(50) NOT NULL"
event_action = "VARCHAR(100)"
event_label = "VARCHAR(255)"
event_value = "DECIMAL(10,2)"
user_id = "UUID -- Can reference customer or tenant_user"
session_id = "VARCHAR(100)"
ip_address = "INET"
user_agent = "TEXT"
referer = "TEXT"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_analytics_events_tenant_date (tenant_id, created_at)"
-- Partition by month for performance

[daily_metrics]
; Pre-aggregated daily metrics
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
date = "DATE NOT NULL"
metric_category = "VARCHAR(50) NOT NULL -- revenue|leads|conversations|content"
metric_name = "VARCHAR(100) NOT NULL"
metric_value = "DECIMAL(12,2) NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(tenant_id, date, metric_category, metric_name)"
INDEX = "idx_daily_metrics_lookup (tenant_id, date, metric_category)"

[reports]
; Saved report configurations
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(255) NOT NULL"
type = "VARCHAR(50) NOT NULL -- performance|revenue|leads|campaigns"
filters = "TEXT -- JSON filters"
schedule = "VARCHAR(20) CHECK (schedule IN ('daily', 'weekly', 'monthly', NULL))"
recipients = "TEXT[] -- Email addresses"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
last_run_at = "TIMESTAMP"

# ==========================================
# INDUSTRY-SPECIFIC TABLES
# ==========================================

[hotel_rooms]
; For hotels and lodging
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
room_number = "VARCHAR(20) NOT NULL"
room_type = "VARCHAR(50) NOT NULL"
floor = "INTEGER"
max_occupancy = "INTEGER NOT NULL"
base_price = "DECIMAL(10,2) NOT NULL"
amenities = "TEXT[]"
status = "VARCHAR(20) CHECK (status IN ('available', 'occupied', 'maintenance', 'reserved'))"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(tenant_id, room_number)"

[restaurant_tables]
; For restaurants
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
table_number = "VARCHAR(20) NOT NULL"
section = "VARCHAR(50)"
seats = "INTEGER NOT NULL"
is_available = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(tenant_id, table_number)"

[restaurant_menu_categories]
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(100) NOT NULL"
description = "TEXT"
sort_order = "INTEGER NOT NULL"
is_active = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"

[restaurant_menu_items]
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
category_id = "INTEGER REFERENCES restaurant_menu_categories(id)"
name = "VARCHAR(255) NOT NULL"
description = "TEXT"
price = "DECIMAL(10,2) NOT NULL"
currency = "VARCHAR(3) DEFAULT 'KES'"
image_url = "TEXT"
is_available = "BOOLEAN DEFAULT true"
is_vegetarian = "BOOLEAN DEFAULT false"
is_vegan = "BOOLEAN DEFAULT false"
is_gluten_free = "BOOLEAN DEFAULT false"
spice_level = "INTEGER CHECK (spice_level >= 0 AND spice_level <= 5)"
preparation_time_minutes = "INTEGER"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_menu_items_category (category_id)"

[property_listings]
; For real estate
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
property_type = "VARCHAR(50) NOT NULL -- apartment|house|land|commercial"
listing_type = "VARCHAR(20) NOT NULL -- sale|rent"
title = "VARCHAR(255) NOT NULL"
description = "TEXT"
price = "DECIMAL(12,2) NOT NULL"
currency = "VARCHAR(3) DEFAULT 'KES'"
bedrooms = "INTEGER"
bathrooms = "DECIMAL(3,1)"
area_sqm = "DECIMAL(10,2)"
address = "TEXT NOT NULL"
city = "VARCHAR(100) NOT NULL"
neighborhood = "VARCHAR(100)"
latitude = "DECIMAL(10,8)"
longitude = "DECIMAL(11,8)"
year_built = "INTEGER"
is_featured = "BOOLEAN DEFAULT false"
status = "VARCHAR(20) CHECK (status IN ('available', 'under_offer', 'sold', 'rented'))"
agent_id = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"
listed_at = "TIMESTAMP"
sold_at = "TIMESTAMP"
INDEX = "idx_listings_search (tenant_id, status, property_type, city)"

[property_features]
; Property amenities and features
id = "SERIAL PRIMARY KEY"
listing_id = "UUID REFERENCES property_listings(id) ON DELETE CASCADE"
feature_category = "VARCHAR(50) NOT NULL -- amenities|security|utilities"
feature_name = "VARCHAR(100) NOT NULL"
feature_value = "VARCHAR(255)"
created_at = "TIMESTAMP DEFAULT NOW()"

[property_images]
id = "SERIAL PRIMARY KEY"
listing_id = "UUID REFERENCES property_listings(id) ON DELETE CASCADE"
image_url = "TEXT NOT NULL"
thumbnail_url = "TEXT"
caption = "VARCHAR(255)"
is_primary = "BOOLEAN DEFAULT false"
sort_order = "INTEGER"
created_at = "TIMESTAMP DEFAULT NOW()"

[vehicle_inventory]
; For car dealerships
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
vin = "VARCHAR(17)"
make = "VARCHAR(50) NOT NULL"
model = "VARCHAR(50) NOT NULL"
year = "INTEGER NOT NULL"
trim = "VARCHAR(100)"
body_type = "VARCHAR(50)"
color = "VARCHAR(50)"
mileage_km = "INTEGER"
fuel_type = "VARCHAR(20)"
transmission = "VARCHAR(20)"
drive_type = "VARCHAR(20)"
engine_size = "VARCHAR(20)"
price = "DECIMAL(12,2) NOT NULL"
discounted_price = "DECIMAL(12,2)"
condition = "VARCHAR(20) CHECK (condition IN ('new', 'used', 'certified'))"
status = "VARCHAR(20) CHECK (status IN ('available', 'reserved', 'sold', 'in_transit'))"
created_at = "TIMESTAMP DEFAULT NOW()"
arrived_at = "TIMESTAMP"
sold_at = "TIMESTAMP"
INDEX = "idx_vehicles_search (tenant_id, status, make, model)"

[vehicle_features]
id = "SERIAL PRIMARY KEY"
vehicle_id = "UUID REFERENCES vehicle_inventory(id) ON DELETE CASCADE"
feature_category = "VARCHAR(50) NOT NULL"
feature_name = "VARCHAR(100) NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"

[beauty_services]
; For beauty salons
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
service_category = "VARCHAR(50) NOT NULL -- hair|nails|facial|massage"
service_name = "VARCHAR(100) NOT NULL"
description = "TEXT"
duration_minutes = "INTEGER NOT NULL"
price = "DECIMAL(10,2) NOT NULL"
requires_consultation = "BOOLEAN DEFAULT false"
is_active = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"

[beauty_staff]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
staff_name = "VARCHAR(100) NOT NULL"
title = "VARCHAR(100)"
specializations = "TEXT[]"
bio = "TEXT"
photo_url = "TEXT"
is_available = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"

[medical_services]
; For medical clinics
id = "SERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
service_name = "VARCHAR(255) NOT NULL"
service_category = "VARCHAR(50) NOT NULL"
description = "TEXT"
duration_minutes = "INTEGER"
price = "DECIMAL(10,2)"
requires_appointment = "BOOLEAN DEFAULT true"
is_emergency = "BOOLEAN DEFAULT false"
created_at = "TIMESTAMP DEFAULT NOW()"

[medical_practitioners]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(100) NOT NULL"
title = "VARCHAR(20) -- Dr.|Prof.|Mr.|Ms."
qualification = "VARCHAR(255)"
specialization = "VARCHAR(100)"
license_number = "VARCHAR(50)"
years_experience = "INTEGER"
photo_url = "TEXT"
bio = "TEXT"
is_available = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"

[hardware_products]
; For hardware stores
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
sku = "VARCHAR(50) NOT NULL"
name = "VARCHAR(255) NOT NULL"
category = "VARCHAR(100) NOT NULL"
brand = "VARCHAR(100)"
unit = "VARCHAR(20) NOT NULL -- piece|kg|meter|bag"
price_retail = "DECIMAL(10,2) NOT NULL"
price_wholesale = "DECIMAL(10,2)"
min_wholesale_quantity = "INTEGER"
current_stock = "INTEGER NOT NULL DEFAULT 0"
reorder_level = "INTEGER"
is_active = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"
UNIQUE = "(tenant_id, sku)"
INDEX = "idx_hardware_products_search (tenant_id, category, name)"

# ==========================================
# BILLING & PAYMENTS TABLES
# ==========================================

[invoices]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id)"
invoice_number = "VARCHAR(50) UNIQUE NOT NULL"
invoice_date = "DATE NOT NULL"
due_date = "DATE NOT NULL"
subtotal = "DECIMAL(10,2) NOT NULL"
tax_amount = "DECIMAL(10,2) DEFAULT 0"
total_amount = "DECIMAL(10,2) NOT NULL"
currency = "VARCHAR(3) DEFAULT 'KES'"
status = "VARCHAR(20) CHECK (status IN ('draft', 'sent', 'paid', 'overdue', 'canceled'))"
paid_at = "TIMESTAMP"
created_at = "TIMESTAMP DEFAULT NOW()"

[invoice_items]
id = "SERIAL PRIMARY KEY"
invoice_id = "UUID REFERENCES invoices(id) ON DELETE CASCADE"
description = "TEXT NOT NULL"
quantity = "DECIMAL(10,2) NOT NULL"
unit_price = "DECIMAL(10,2) NOT NULL"
total = "DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED"
created_at = "TIMESTAMP DEFAULT NOW()"

[payments]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id)"
invoice_id = "UUID REFERENCES invoices(id)"
amount = "DECIMAL(10,2) NOT NULL"
currency = "VARCHAR(3) DEFAULT 'KES'"
payment_method = "VARCHAR(20) NOT NULL"
payment_reference = "VARCHAR(100)"
status = "VARCHAR(20) CHECK (status IN ('pending', 'completed', 'failed', 'refunded'))"
processed_at = "TIMESTAMP"
created_at = "TIMESTAMP DEFAULT NOW()"

[usage_tracking]
; Track feature usage for billing
id = "BIGSERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
feature = "VARCHAR(50) NOT NULL -- conversations|campaigns|ai_tokens|storage"
quantity = "DECIMAL(12,4) NOT NULL"
unit = "VARCHAR(20) NOT NULL -- count|GB|tokens"
date = "DATE NOT NULL"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_usage_tracking_billing (tenant_id, date, feature)"

# ==========================================
# SECURITY & AUDIT TABLES
# ==========================================

[audit_logs]
id = "BIGSERIAL PRIMARY KEY"
tenant_id = "UUID REFERENCES tenants(id)"
user_id = "UUID"
user_type = "VARCHAR(20) -- platform_user|tenant_user"
action = "VARCHAR(100) NOT NULL"
entity_type = "VARCHAR(50)"
entity_id = "UUID"
old_values = "TEXT -- JSON"
new_values = "TEXT -- JSON"
ip_address = "INET"
user_agent = "TEXT"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_audit_logs_tenant (tenant_id, created_at)"
-- Partition by month

[api_keys]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(100) NOT NULL"
key_hash = "VARCHAR(255) NOT NULL"
permissions = "TEXT[]"
last_used_at = "TIMESTAMP"
expires_at = "TIMESTAMP"
is_active = "BOOLEAN DEFAULT true"
created_by = "UUID REFERENCES tenant_users(id)"
created_at = "TIMESTAMP DEFAULT NOW()"

[webhooks]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
tenant_id = "UUID REFERENCES tenants(id) ON DELETE CASCADE"
name = "VARCHAR(100) NOT NULL"
url = "TEXT NOT NULL"
events = "TEXT[] NOT NULL"
secret = "VARCHAR(255)"
is_active = "BOOLEAN DEFAULT true"
created_at = "TIMESTAMP DEFAULT NOW()"
last_triggered_at = "TIMESTAMP"

[webhook_logs]
id = "BIGSERIAL PRIMARY KEY"
webhook_id = "UUID REFERENCES webhooks(id) ON DELETE CASCADE"
event_type = "VARCHAR(50) NOT NULL"
payload = "TEXT NOT NULL"
response_status = "INTEGER"
response_body = "TEXT"
attempts = "INTEGER DEFAULT 1"
success = "BOOLEAN"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_webhook_logs_recent (webhook_id, created_at DESC)"

# ==========================================
# SYSTEM TABLES
# ==========================================

[migrations]
id = "SERIAL PRIMARY KEY"
version = "VARCHAR(50) UNIQUE NOT NULL"
description = "TEXT"
executed_at = "TIMESTAMP DEFAULT NOW()"

[feature_flags]
id = "SERIAL PRIMARY KEY"
flag_name = "VARCHAR(100) UNIQUE NOT NULL"
description = "TEXT"
is_enabled_globally = "BOOLEAN DEFAULT false"
rollout_percentage = "INTEGER DEFAULT 0 CHECK (rollout_percentage >= 0 AND rollout_percentage <= 100)"
enabled_tenants = "UUID[]"
created_at = "TIMESTAMP DEFAULT NOW()"
updated_at = "TIMESTAMP DEFAULT NOW()"

[system_health]
id = "SERIAL PRIMARY KEY"
service_name = "VARCHAR(50) NOT NULL"
status = "VARCHAR(20) CHECK (status IN ('healthy', 'degraded', 'down'))"
response_time_ms = "INTEGER"
error_rate = "DECIMAL(5,2)"
checked_at = "TIMESTAMP DEFAULT NOW()"

[background_jobs]
id = "UUID PRIMARY KEY DEFAULT gen_random_uuid()"
job_type = "VARCHAR(50) NOT NULL"
payload = "TEXT NOT NULL -- JSON"
status = "VARCHAR(20) CHECK (status IN ('pending', 'running', 'completed', 'failed'))"
attempts = "INTEGER DEFAULT 0"
max_attempts = "INTEGER DEFAULT 3"
error_message = "TEXT"
scheduled_for = "TIMESTAMP"
started_at = "TIMESTAMP"
completed_at = "TIMESTAMP"
created_at = "TIMESTAMP DEFAULT NOW()"
INDEX = "idx_background_jobs_pending (status, scheduled_for)"

# ==========================================
# INDEXES FOR PERFORMANCE
# ==========================================

[performance_indexes]
; Key indexes for query optimization
conversations_recent = "CREATE INDEX idx_conversations_recent ON conversations(tenant_id, created_at DESC)"
messages_unread = "CREATE INDEX idx_messages_unread ON messages(conversation_id) WHERE read_at IS NULL"
leads_active = "CREATE INDEX idx_leads_active ON leads(tenant_id, status) WHERE status NOT IN ('won', 'lost')"
campaigns_running = "CREATE INDEX idx_campaigns_running ON campaigns(tenant_id, status) WHERE status = 'active'"
customers_phone_lookup = "CREATE INDEX idx_customers_phone ON customers(phone) WHERE phone IS NOT NULL"
ai_usage_recent = "CREATE INDEX idx_ai_usage_recent ON ai_usage(tenant_id, created_at DESC)"

# ==========================================
# ROW LEVEL SECURITY POLICIES
# ==========================================

[rls_policies]
; Ensure data isolation between tenants
tenants = "Users can only see their own tenant"
customers = "Users can only see customers from their tenant"
conversations = "Users can only see conversations from their tenant"
campaigns = "Users can only see campaigns from their tenant"
analytics = "Users can only see analytics from their tenant"

# ==========================================
# IMPLEMENTATION NOTES
# ==========================================

[design_principles]
1 = "Every table has proper primary and foreign keys"
2 = "JSONB used sparingly only for truly dynamic data"
3 = "Proper indexes on all foreign keys and common queries"
4 = "Audit trail on all important entities"
5 = "Soft deletes where appropriate (is_deleted flags)"
6 = "Timestamps on everything for debugging"
7 = "Row Level Security for multi-tenant isolation"
8 = "Partitioning for high-volume tables (events, logs)"
9 = "Materialized views for complex analytics"
10 = "Clear naming conventions throughout"